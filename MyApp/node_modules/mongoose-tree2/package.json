{
  "_args": [
    [
      "mongoose-tree2",
      "D:\\Project2017\\MyApp"
    ]
  ],
  "_from": "mongoose-tree2@latest",
  "_id": "mongoose-tree2@0.2.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/mongoose-tree2",
  "_npmUser": {
    "email": "franck.tab@gmail.com",
    "name": "franck34"
  },
  "_npmVersion": "1.2.25",
  "_phantomChildren": {
    "hooks": "0.2.1",
    "kerberos": "0.0.3"
  },
  "_requested": {
    "name": "mongoose-tree2",
    "raw": "mongoose-tree2",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-tree2/-/mongoose-tree2-0.2.2.tgz",
  "_shasum": "679c24e8012dd86b50ddd4b8de9ba6e3d8b62c32",
  "_shrinkwrap": null,
  "_spec": "mongoose-tree2",
  "_where": "D:\\Project2017\\MyApp",
  "author": {
    "email": "briankircho@gmail.com",
    "name": "Brian Kirchoff"
  },
  "bugs": {
    "url": "https://github.com/briankircho/mongoose-tree/issues"
  },
  "contributors": [
    {
      "email": "franck.tab@gmail.com",
      "name": "Franck Tab"
    },
    {
      "email": "tomas.holas@gmail.com",
      "name": "Tomáš Holas"
    }
  ],
  "dependencies": {
    "mongoose": "~3.5.0"
  },
  "description": "Materialized path hierarchy for mongoose",
  "devDependencies": {
    "async": "~0.1.22",
    "should": "~1.0.0",
    "underscore": "~1.3.3"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "679c24e8012dd86b50ddd4b8de9ba6e3d8b62c32",
    "tarball": "https://registry.npmjs.org/mongoose-tree2/-/mongoose-tree2-0.2.2.tgz"
  },
  "engine": "node >= 0.4.0",
  "homepage": "https://github.com/franck34/mongoose-tree",
  "keywords": [
    "mongoose",
    "materialized",
    "path",
    "tree",
    "mongodb"
  ],
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "email": "franck.tab@gmail.com",
      "name": "franck34"
    }
  ],
  "name": "mongoose-tree2",
  "optionalDependencies": {},
  "readme": "## mongoose-tree\n\nImplements the materialized path strategy for storing a hierarchy of documents with mongoose\n\nWarning: the original code is from Brian Kirchoff, but it seem's that he no longer take care of mongoo-tree.\nhttps://github.com/briankircho/mongoose-tree\n\n\n\n# Usage\n\nInstall via NPM\n\n    $ npm install mongoose-tree\n\nThen you can use the plugin on your schemas\n\n```javascript\nvar tree = require('mongoose-tree');\n\nvar UserSchema = new Schema({\n  name : String\n});\nUserSchema.plugin(tree);\nvar User = mongoose.model('User', UserSchema);\n\nvar adam = new User({ name : 'Adam' });\nvar bob = new User({ name : 'Bob' });\nvar carol = new User({ name : 'Carol' });\n\n// Set the parent relationships\nbob.parent = adam;\ncarol.parent = bob;\n\nadam.save(function() {\n  bob.save(function() {\n    carol.save();\n  });\n});\n```\n\nAt this point in mongoDB you will have documents similar to\n\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000001\"),\n      \"name\" : \"Adam\",\n      \"path\" : \"50136e40c78c4b9403000001\"\n    }\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000002\"),\n      \"name\" : \"Bob\",\n      \"parent\" : ObjectId(\"50136e40c78c4b9403000001\"),\n      \"path\" : \"50136e40c78c4b9403000001#50136e40c78c4b9403000002\"\n    }\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000003\"),\n      \"name\" : \"Carol\",\n      \"parent\" : ObjectId(\"50136e40c78c4b9403000002\"),\n      \"path\" : \"50136e40c78c4b9403000001#50136e40c78c4b9403000002#50136e40c78c4b9403000003\"\n    }\n\nThe path is used for recursive methods and is kept up to date by the plugin if the parent is changed\n\n# API\n\n### getChildren\n\nSignature:\n\n    getChildren([recursive], cb);\n\nif recursive is supplied and true, subchildren are returned\n\nBased on the above hierarchy:\n\n```javascript\nadam.getChildren(function(err, users) {\n  // users is an array of with the bob document\n});\n\nadam.getChildren(true, function(err, users) {\n  // users is an array with both bob and carol documents\n});\n```\n\n### getChildrenTree\n\nSignature:\n   \n    getChildrenTree([args], cb);\n\nreturn a recursive tree of subchildren.\n\nargs is an object you can defined with theses properties :\n\n    filters: mongoose query filter, optional, default null\n      example: filters: {owner:myId}\n\n    columns: mongoose columns, optional, default null (all columns)\n      example: columns: {\"_id name owner\"}\n\n    options: mongoose query option, optional, default null\n      example: options:{{sort:'-name'}}\n\n    minLevel: level at which will start the search, default 1\n      example: minLevel:2\n\n    recursive: boolean, default true\n      make the search recursive or only fetch childs for the specified level\n      example: recursive:false\n\n    emptyChilds: boolean, default true\n      if true, every childs not having subchilds will have childs attribute (empty array)\n      if false, every childs not having subchilds will not have childs attribute\n\n    Example :\n\n    ```javascript\n    var args = {\n      filters: {owner:myId},\n      columns: {\"_id name owner\"},\n      minLevel:2,\n      recursive:true,\n      emptyChilds:false\n    }\n\n    getChildren(args,myCallback);\n    ```\n\nBased on the above hierarchy:\n\n```javascript\nadam.getChildren([function](err, users) {\n\n    /* if you dump users, you will have something like this :\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000001\"),\n      \"name\" : \"Adam\",\n      \"path\" : \"50136e40c78c4b9403000001\"\n      \"childs\" : [{\n          \"_id\" : ObjectId(\"50136e40c78c4b9403000002\"),\n          \"name\" : \"Bob\",\n          \"parent\" : ObjectId(\"50136e40c78c4b9403000001\"),\n          \"path\" : \"50136e40c78c4b9403000001.50136e40c78c4b9403000002\"\n          \"childs\" : [{\n              \"_id\" : ObjectId(\"50136e40c78c4b9403000003\"),\n              \"name\" : \"Carol\",\n              \"parent\" : ObjectId(\"50136e40c78c4b9403000002\"),\n              \"path\" : \"50136e40c78c4b9403000001.50136e40c78c4b9403000002.50136e40c78c4b9403000003\"\n          }]\n      }]\n    }\n    */\n\n});\n\n```\n\n### getAncestors\n\nSignature:\n\n    getAncestors(cb);\n\nBased on the above hierarchy:\n\n```javascript\ncarol.getAncestors(function(err, users) {\n  // users is an array of adam and bob\n})\n```\n\n### level\n\nEqual to the level of the hierarchy\n\n```javascript\ncarol.level; // equals 3\n```\n\n# Tests\n\nTo run the tests install mocha\n\n    npm install mocha -g\n\nand then run\n\n    mocha\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/briankircho/mongoose-tree.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.2.2"
}
